9 Mar 2016 07:46

/(A radical redo of org-pm, for latex and tiddlywiki)./

Publish an org-mode file or subtree: 

1. As a website, using TiddlyWiki 5 (Node.js version).
2. As PDF, via LaTeX.
  
Requires http://github.com/iani/tiddlywiki-render-template - and clones it automatically from within Emacs before the first export.

* /INCOMPLETE/

* TiddlyWiki

TiddlyWiki export and website publishing is implemented in the =org-pm-tw= library.  It uses one main interactive command: =org-pm-tw-deploy=.

This command installs the wiki templates from github (if needed), exports the file or section from the current buffer to the WIKIS folder, renders it to html, and uploads the result as website to github.  This one command alone is sufficient to produce and update websites from any org-mode file or section.  

One can call the command with the Meta-x prefix (esc-x, alt-x or opt-x) like this:

: Meta-x org-pm-tw-deploy

However, to export sections, you need to call this command with a prefix =C-u=, and this is not possible if you are using =helm= (as I am).  Therefore, the command is bound to the keyboard shortcut =Meta-p p=.  The next subsection gives an overview of the keyboard shortcuts of =org-pm2=.

** Keyboard shortcuts: Meta-p p, r, e, u

I use the keyboard combination =Meta-p= (Alt-p, Opt-p or Esc-p) as prefix for the 3 interactive commands of the org-pm-tw library.  This is because (a) p is a mnemonic for "publish" and (b) it is not occupied by any other commands in Org mode, which is the only mode concerned.  Thus, the keyboard shortcuts are: 

- Meta-p p :: org-pm-tw-deploy
- Meta-p d :: org-pm-tw-deploy (alternative)
- Meta-p r :: org-pm-tw-render
- Meta-p e :: org-pm-tw-export
- Meta-p u :: org-pm-tw-upload
- Meta-p l :: org-pm-latex-export (see section on latex below)

Preceding any of the above commands with the prefix argument shortcut (=C-u=) makes them work on the current section of the org-mode file, instead of the entire file. 

** Single Steps

For test purposes, the three steps /export/, /render/ and /upload/ can also be executed separately, although this is not necessary.

*** Export a file/section to a TiddlyWiki

*** Render a file/section to html

*** Upload all Wikis of this folder as site to github 

** How to specify which sections become tiddlers

Per default, each top level section of the org-mode document becomes a separate tiddler, while subsections of levels 2 or lower become subsections of the top-level tiddlers. 

However, it is possible to export subsections of level 2 or lower as independent tiddlers.  Such subsections will be incorporated in the tiddler of the section of which they are immediate children, and will be listed in a multi-level dynamically foldeable menu in the main body of the tiddler. 

To indicate that a subsection should be exported as separate tiddler, give it the tag =tiddler= or set the value of the property =TIDDLER= to =t=.

** Customize the look (style, theme) of the site
:PROPERTIES:
:DATE:     <2016-03-09 Wed 14:47>
:END:

The easiest way to customize is to open the wiki on a browser and use the built-in interface of TiddlyWiki.  To do this, open a terminal and do the following: 

1. Navigate to the directory of the wiki

For example: 

#+BEGIN_EXAMPLE
cd ./WIKIS/template
#+END_EXAMPLE

2. Run tiddlywiki on the server folder specifying a port number of your choice.

For example:

#+BEGIN_EXAMPLE
tiddlywiki server --server 8080
#+END_EXAMPLE

Choose a different port number for each wiki that you want to start while other wikis are already running.

** Test rendering a wiki with shell command

For testing purposes, you can try rendering a wiki to html from the command-line: 

1. Navigate to the directory of the wiki

For example: 

#+BEGIN_EXAMPLE
cd ./WIKIS/template
#+END_EXAMPLE

2. Run the render command of tiddlywiki specifying =rendered= as source directory and a directory of your choice as target directory.

For example:

#+BEGIN_EXAMPLE
tiddlywiki ./readonly --rendertiddler $:/core/save/all ../../../../rendered/render_test.html text/plain
#+END_EXAMPLE

** What is stored and where
:PROPERTIES: 
:DATE:     <2016-03-09 Wed 08:28>
:END:

- Each TiddlyWiki is stored as a subfolder inside the directory whose path is defined in custom variable =org-pm-wikis=.
- The default value of =org-pm-wikis= is "WIKIS".
- The =org-pm-wikis= directory is created in the same directory that contains the org-mode source for the exported wiki.  In this way, each directory that contains org-mode files can be a group of wikis that are exported as html pages to form a website containing many pages. 
- The TiddlyWiki source of each wiki is stored in its own folder.
- The user is prompted to choose or enter the name of the folder before exporting.
- The name chosen by the user is stored in the org-mode source file to serve as default for future exports.
- The rendered TiddlyWiki html-export files of all Wikis are stored in a separate subdirectory of the =org-pm-wikis= folder, named =rendered=.
- The name of the rendered files is derived from the name of the directory of its wiki source.
- The entire =org-pm-wikis= directory is a git repository.
- The subdirectory =rendered= is used as root directory for the gh_pages branch of the git repository, so that the rendered wikis become html pages in the [[https://pages.github.com/][github-pages]] site of the git repository.
- Before exporting a file or section, prepare the directory of the org-source file by checking:
  - Does an =org-pm-wikis= subfolder exist? If not, make one.
  - Is the containing folder a git repository?  If not, make a repository and configure it to be a github-repository named after the name of the containing folder.  Also configure =rendered= subdirectory to be the root directory of the =gh_pages= branch.
  - This means that the github repository of an exported org-mode file will contain all 3 elements of the export process:
    1. The source code (in org-mode).
    2. The TiddlyWiki source code (in tiddler markup format, as single tiddlers, plus all accompanying config files and tiddlers)
    3. The rendered =html= file.

* PDF
:PROPERTIES:
:DATE:     <2016-03-09 Wed 14:45>
:END:

** Configuring latex for emacs


** Main command: org-pm-latex-export

Keyboard shortcut: Meta-p l

Calling the command with a prefix (C-u) exports the current section only.  Calling it without a prefix exports the entire file.

** Choosing templates


** Where export files are stored and how they are named
:PROPERTIES: 
:DATE:     <2016-03-09 Wed 08:28>
:END:

PDF exports are stored in the org-attachments directory

- Entire-file exports are saved in subdirectory "PDFs" of the attachments directory.  The PDF files are named after the name of the org-source file.
- Subtree exports are saved as regular attachments to the subtree's attachment dir.  The PDF file is named after the heading of the subtree, but the user is prompted to edit the file name in the minibuffer before starting the export.

